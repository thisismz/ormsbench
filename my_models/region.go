// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Region is an object representing the database table.
type Region struct {
	RegionID          int16  `boil:"region_id" json:"region_id" toml:"region_id" yaml:"region_id"`
	RegionDescription string `boil:"region_description" json:"region_description" toml:"region_description" yaml:"region_description"`

	R *regionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L regionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegionColumns = struct {
	RegionID          string
	RegionDescription string
}{
	RegionID:          "region_id",
	RegionDescription: "region_description",
}

var RegionTableColumns = struct {
	RegionID          string
	RegionDescription string
}{
	RegionID:          "region.region_id",
	RegionDescription: "region.region_description",
}

// Generated where

var RegionWhere = struct {
	RegionID          whereHelperint16
	RegionDescription whereHelperstring
}{
	RegionID:          whereHelperint16{field: "\"region\".\"region_id\""},
	RegionDescription: whereHelperstring{field: "\"region\".\"region_description\""},
}

// RegionRels is where relationship names are stored.
var RegionRels = struct {
	Territories string
}{
	Territories: "Territories",
}

// regionR is where relationships are stored.
type regionR struct {
	Territories TerritorySlice `boil:"Territories" json:"Territories" toml:"Territories" yaml:"Territories"`
}

// NewStruct creates a new relationship struct
func (*regionR) NewStruct() *regionR {
	return &regionR{}
}

// regionL is where Load methods for each relationship are stored.
type regionL struct{}

var (
	regionAllColumns            = []string{"region_id", "region_description"}
	regionColumnsWithoutDefault = []string{"region_id", "region_description"}
	regionColumnsWithDefault    = []string{}
	regionPrimaryKeyColumns     = []string{"region_id"}
)

type (
	// RegionSlice is an alias for a slice of pointers to Region.
	// This should almost always be used instead of []Region.
	RegionSlice []*Region
	// RegionHook is the signature for custom Region hook methods
	RegionHook func(context.Context, boil.ContextExecutor, *Region) error

	regionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	regionType                 = reflect.TypeOf(&Region{})
	regionMapping              = queries.MakeStructMapping(regionType)
	regionPrimaryKeyMapping, _ = queries.BindMapping(regionType, regionMapping, regionPrimaryKeyColumns)
	regionInsertCacheMut       sync.RWMutex
	regionInsertCache          = make(map[string]insertCache)
	regionUpdateCacheMut       sync.RWMutex
	regionUpdateCache          = make(map[string]updateCache)
	regionUpsertCacheMut       sync.RWMutex
	regionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var regionBeforeInsertHooks []RegionHook
var regionBeforeUpdateHooks []RegionHook
var regionBeforeDeleteHooks []RegionHook
var regionBeforeUpsertHooks []RegionHook

var regionAfterInsertHooks []RegionHook
var regionAfterSelectHooks []RegionHook
var regionAfterUpdateHooks []RegionHook
var regionAfterDeleteHooks []RegionHook
var regionAfterUpsertHooks []RegionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Region) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Region) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Region) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Region) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Region) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Region) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Region) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Region) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Region) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range regionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegionHook registers your hook function for all future operations.
func AddRegionHook(hookPoint boil.HookPoint, regionHook RegionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		regionBeforeInsertHooks = append(regionBeforeInsertHooks, regionHook)
	case boil.BeforeUpdateHook:
		regionBeforeUpdateHooks = append(regionBeforeUpdateHooks, regionHook)
	case boil.BeforeDeleteHook:
		regionBeforeDeleteHooks = append(regionBeforeDeleteHooks, regionHook)
	case boil.BeforeUpsertHook:
		regionBeforeUpsertHooks = append(regionBeforeUpsertHooks, regionHook)
	case boil.AfterInsertHook:
		regionAfterInsertHooks = append(regionAfterInsertHooks, regionHook)
	case boil.AfterSelectHook:
		regionAfterSelectHooks = append(regionAfterSelectHooks, regionHook)
	case boil.AfterUpdateHook:
		regionAfterUpdateHooks = append(regionAfterUpdateHooks, regionHook)
	case boil.AfterDeleteHook:
		regionAfterDeleteHooks = append(regionAfterDeleteHooks, regionHook)
	case boil.AfterUpsertHook:
		regionAfterUpsertHooks = append(regionAfterUpsertHooks, regionHook)
	}
}

// One returns a single region record from the query.
func (q regionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Region, error) {
	o := &Region{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for region")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Region records from the query.
func (q regionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegionSlice, error) {
	var o []*Region

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Region slice")
	}

	if len(regionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Region records in the query.
func (q regionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count region rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q regionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if region exists")
	}

	return count > 0, nil
}

// Territories retrieves all the territory's Territories with an executor.
func (o *Region) Territories(mods ...qm.QueryMod) territoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"territories\".\"region_id\"=?", o.RegionID),
	)

	query := Territories(queryMods...)
	queries.SetFrom(query.Query, "\"territories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"territories\".*"})
	}

	return query
}

// LoadTerritories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (regionL) LoadTerritories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegion interface{}, mods queries.Applicator) error {
	var slice []*Region
	var object *Region

	if singular {
		object = maybeRegion.(*Region)
	} else {
		slice = *maybeRegion.(*[]*Region)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &regionR{}
		}
		args = append(args, object.RegionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &regionR{}
			}

			for _, a := range args {
				if a == obj.RegionID {
					continue Outer
				}
			}

			args = append(args, obj.RegionID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`territories`),
		qm.WhereIn(`territories.region_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load territories")
	}

	var resultSlice []*Territory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice territories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on territories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for territories")
	}

	if len(territoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Territories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &territoryR{}
			}
			foreign.R.Region = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RegionID == foreign.RegionID {
				local.R.Territories = append(local.R.Territories, foreign)
				if foreign.R == nil {
					foreign.R = &territoryR{}
				}
				foreign.R.Region = local
				break
			}
		}
	}

	return nil
}

// AddTerritories adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.Territories.
// Sets related.R.Region appropriately.
func (o *Region) AddTerritories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Territory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegionID = o.RegionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"territories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"region_id"}),
				strmangle.WhereClause("\"", "\"", 2, territoryPrimaryKeyColumns),
			)
			values := []interface{}{o.RegionID, rel.TerritoryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegionID = o.RegionID
		}
	}

	if o.R == nil {
		o.R = &regionR{
			Territories: related,
		}
	} else {
		o.R.Territories = append(o.R.Territories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &territoryR{
				Region: o,
			}
		} else {
			rel.R.Region = o
		}
	}
	return nil
}

// Regions retrieves all the records using an executor.
func Regions(mods ...qm.QueryMod) regionQuery {
	mods = append(mods, qm.From("\"region\""))
	return regionQuery{NewQuery(mods...)}
}

// FindRegion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegion(ctx context.Context, exec boil.ContextExecutor, regionID int16, selectCols ...string) (*Region, error) {
	regionObj := &Region{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"region\" where \"region_id\"=$1", sel,
	)

	q := queries.Raw(query, regionID)

	err := q.Bind(ctx, exec, regionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from region")
	}

	if err = regionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return regionObj, err
	}

	return regionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Region) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no region provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(regionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	regionInsertCacheMut.RLock()
	cache, cached := regionInsertCache[key]
	regionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			regionAllColumns,
			regionColumnsWithDefault,
			regionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(regionType, regionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"region\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"region\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into region")
	}

	if !cached {
		regionInsertCacheMut.Lock()
		regionInsertCache[key] = cache
		regionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Region.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Region) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	regionUpdateCacheMut.RLock()
	cache, cached := regionUpdateCache[key]
	regionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			regionAllColumns,
			regionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update region, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"region\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, regionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, append(wl, regionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update region row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for region")
	}

	if !cached {
		regionUpdateCacheMut.Lock()
		regionUpdateCache[key] = cache
		regionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q regionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for region")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for region")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"region\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, regionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in region slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all region")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Region) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no region provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(regionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	regionUpsertCacheMut.RLock()
	cache, cached := regionUpsertCache[key]
	regionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			regionAllColumns,
			regionColumnsWithDefault,
			regionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			regionAllColumns,
			regionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert region, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(regionPrimaryKeyColumns))
			copy(conflict, regionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"region\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(regionType, regionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert region")
	}

	if !cached {
		regionUpsertCacheMut.Lock()
		regionUpsertCache[key] = cache
		regionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Region record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Region) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Region provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), regionPrimaryKeyMapping)
	sql := "DELETE FROM \"region\" WHERE \"region_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from region")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for region")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q regionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no regionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from region")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for region")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(regionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"region\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, regionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from region slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for region")
	}

	if len(regionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Region) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegion(ctx, exec, o.RegionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"region\".* FROM \"region\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, regionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RegionSlice")
	}

	*o = slice

	return nil
}

// RegionExists checks if the Region row exists.
func RegionExists(ctx context.Context, exec boil.ContextExecutor, regionID int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"region\" where \"region_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, regionID)
	}
	row := exec.QueryRowContext(ctx, sql, regionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if region exists")
	}

	return exists, nil
}
