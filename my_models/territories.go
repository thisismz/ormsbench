// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Territory is an object representing the database table.
type Territory struct {
	TerritoryID          string `boil:"territory_id" json:"territory_id" toml:"territory_id" yaml:"territory_id"`
	TerritoryDescription string `boil:"territory_description" json:"territory_description" toml:"territory_description" yaml:"territory_description"`
	RegionID             int16  `boil:"region_id" json:"region_id" toml:"region_id" yaml:"region_id"`

	R *territoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L territoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TerritoryColumns = struct {
	TerritoryID          string
	TerritoryDescription string
	RegionID             string
}{
	TerritoryID:          "territory_id",
	TerritoryDescription: "territory_description",
	RegionID:             "region_id",
}

var TerritoryTableColumns = struct {
	TerritoryID          string
	TerritoryDescription string
	RegionID             string
}{
	TerritoryID:          "territories.territory_id",
	TerritoryDescription: "territories.territory_description",
	RegionID:             "territories.region_id",
}

// Generated where

var TerritoryWhere = struct {
	TerritoryID          whereHelperstring
	TerritoryDescription whereHelperstring
	RegionID             whereHelperint16
}{
	TerritoryID:          whereHelperstring{field: "\"territories\".\"territory_id\""},
	TerritoryDescription: whereHelperstring{field: "\"territories\".\"territory_description\""},
	RegionID:             whereHelperint16{field: "\"territories\".\"region_id\""},
}

// TerritoryRels is where relationship names are stored.
var TerritoryRels = struct {
	Region    string
	Employees string
}{
	Region:    "Region",
	Employees: "Employees",
}

// territoryR is where relationships are stored.
type territoryR struct {
	Region    *Region       `boil:"Region" json:"Region" toml:"Region" yaml:"Region"`
	Employees EmployeeSlice `boil:"Employees" json:"Employees" toml:"Employees" yaml:"Employees"`
}

// NewStruct creates a new relationship struct
func (*territoryR) NewStruct() *territoryR {
	return &territoryR{}
}

// territoryL is where Load methods for each relationship are stored.
type territoryL struct{}

var (
	territoryAllColumns            = []string{"territory_id", "territory_description", "region_id"}
	territoryColumnsWithoutDefault = []string{"territory_id", "territory_description", "region_id"}
	territoryColumnsWithDefault    = []string{}
	territoryPrimaryKeyColumns     = []string{"territory_id"}
)

type (
	// TerritorySlice is an alias for a slice of pointers to Territory.
	// This should almost always be used instead of []Territory.
	TerritorySlice []*Territory
	// TerritoryHook is the signature for custom Territory hook methods
	TerritoryHook func(context.Context, boil.ContextExecutor, *Territory) error

	territoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	territoryType                 = reflect.TypeOf(&Territory{})
	territoryMapping              = queries.MakeStructMapping(territoryType)
	territoryPrimaryKeyMapping, _ = queries.BindMapping(territoryType, territoryMapping, territoryPrimaryKeyColumns)
	territoryInsertCacheMut       sync.RWMutex
	territoryInsertCache          = make(map[string]insertCache)
	territoryUpdateCacheMut       sync.RWMutex
	territoryUpdateCache          = make(map[string]updateCache)
	territoryUpsertCacheMut       sync.RWMutex
	territoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var territoryBeforeInsertHooks []TerritoryHook
var territoryBeforeUpdateHooks []TerritoryHook
var territoryBeforeDeleteHooks []TerritoryHook
var territoryBeforeUpsertHooks []TerritoryHook

var territoryAfterInsertHooks []TerritoryHook
var territoryAfterSelectHooks []TerritoryHook
var territoryAfterUpdateHooks []TerritoryHook
var territoryAfterDeleteHooks []TerritoryHook
var territoryAfterUpsertHooks []TerritoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Territory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Territory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Territory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Territory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Territory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Territory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Territory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Territory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Territory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range territoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTerritoryHook registers your hook function for all future operations.
func AddTerritoryHook(hookPoint boil.HookPoint, territoryHook TerritoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		territoryBeforeInsertHooks = append(territoryBeforeInsertHooks, territoryHook)
	case boil.BeforeUpdateHook:
		territoryBeforeUpdateHooks = append(territoryBeforeUpdateHooks, territoryHook)
	case boil.BeforeDeleteHook:
		territoryBeforeDeleteHooks = append(territoryBeforeDeleteHooks, territoryHook)
	case boil.BeforeUpsertHook:
		territoryBeforeUpsertHooks = append(territoryBeforeUpsertHooks, territoryHook)
	case boil.AfterInsertHook:
		territoryAfterInsertHooks = append(territoryAfterInsertHooks, territoryHook)
	case boil.AfterSelectHook:
		territoryAfterSelectHooks = append(territoryAfterSelectHooks, territoryHook)
	case boil.AfterUpdateHook:
		territoryAfterUpdateHooks = append(territoryAfterUpdateHooks, territoryHook)
	case boil.AfterDeleteHook:
		territoryAfterDeleteHooks = append(territoryAfterDeleteHooks, territoryHook)
	case boil.AfterUpsertHook:
		territoryAfterUpsertHooks = append(territoryAfterUpsertHooks, territoryHook)
	}
}

// One returns a single territory record from the query.
func (q territoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Territory, error) {
	o := &Territory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for territories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Territory records from the query.
func (q territoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TerritorySlice, error) {
	var o []*Territory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Territory slice")
	}

	if len(territoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Territory records in the query.
func (q territoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count territories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q territoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if territories exists")
	}

	return count > 0, nil
}

// Region pointed to by the foreign key.
func (o *Territory) Region(mods ...qm.QueryMod) regionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"region_id\" = ?", o.RegionID),
	}

	queryMods = append(queryMods, mods...)

	query := Regions(queryMods...)
	queries.SetFrom(query.Query, "\"region\"")

	return query
}

// Employees retrieves all the employee's Employees with an executor.
func (o *Territory) Employees(mods ...qm.QueryMod) employeeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"employee_territories\" on \"employees\".\"employee_id\" = \"employee_territories\".\"employee_id\""),
		qm.Where("\"employee_territories\".\"territory_id\"=?", o.TerritoryID),
	)

	query := Employees(queryMods...)
	queries.SetFrom(query.Query, "\"employees\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"employees\".*"})
	}

	return query
}

// LoadRegion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (territoryL) LoadRegion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerritory interface{}, mods queries.Applicator) error {
	var slice []*Territory
	var object *Territory

	if singular {
		object = maybeTerritory.(*Territory)
	} else {
		slice = *maybeTerritory.(*[]*Territory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &territoryR{}
		}
		args = append(args, object.RegionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &territoryR{}
			}

			for _, a := range args {
				if a == obj.RegionID {
					continue Outer
				}
			}

			args = append(args, obj.RegionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`region`),
		qm.WhereIn(`region.region_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Region")
	}

	var resultSlice []*Region
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Region")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for region")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for region")
	}

	if len(territoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Region = foreign
		if foreign.R == nil {
			foreign.R = &regionR{}
		}
		foreign.R.Territories = append(foreign.R.Territories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RegionID == foreign.RegionID {
				local.R.Region = foreign
				if foreign.R == nil {
					foreign.R = &regionR{}
				}
				foreign.R.Territories = append(foreign.R.Territories, local)
				break
			}
		}
	}

	return nil
}

// LoadEmployees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (territoryL) LoadEmployees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTerritory interface{}, mods queries.Applicator) error {
	var slice []*Territory
	var object *Territory

	if singular {
		object = maybeTerritory.(*Territory)
	} else {
		slice = *maybeTerritory.(*[]*Territory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &territoryR{}
		}
		args = append(args, object.TerritoryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &territoryR{}
			}

			for _, a := range args {
				if a == obj.TerritoryID {
					continue Outer
				}
			}

			args = append(args, obj.TerritoryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"employees\".employee_id, \"employees\".last_name, \"employees\".first_name, \"employees\".title, \"employees\".title_of_courtesy, \"employees\".birth_date, \"employees\".hire_date, \"employees\".address, \"employees\".city, \"employees\".region, \"employees\".postal_code, \"employees\".country, \"employees\".home_phone, \"employees\".extension, \"employees\".photo, \"employees\".notes, \"employees\".reports_to, \"employees\".photo_path, \"a\".\"territory_id\""),
		qm.From("\"employees\""),
		qm.InnerJoin("\"employee_territories\" as \"a\" on \"employees\".\"employee_id\" = \"a\".\"employee_id\""),
		qm.WhereIn("\"a\".\"territory_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load employees")
	}

	var resultSlice []*Employee

	var localJoinCols []string
	for results.Next() {
		one := new(Employee)
		var localJoinCol string

		err = results.Scan(&one.EmployeeID, &one.LastName, &one.FirstName, &one.Title, &one.TitleOfCourtesy, &one.BirthDate, &one.HireDate, &one.Address, &one.City, &one.Region, &one.PostalCode, &one.Country, &one.HomePhone, &one.Extension, &one.Photo, &one.Notes, &one.ReportsTo, &one.PhotoPath, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for employees")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice employees")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Employees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &employeeR{}
			}
			foreign.R.Territories = append(foreign.R.Territories, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.TerritoryID == localJoinCol {
				local.R.Employees = append(local.R.Employees, foreign)
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.Territories = append(foreign.R.Territories, local)
				break
			}
		}
	}

	return nil
}

// SetRegion of the territory to the related item.
// Sets o.R.Region to related.
// Adds o to related.R.Territories.
func (o *Territory) SetRegion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Region) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"territories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"region_id"}),
		strmangle.WhereClause("\"", "\"", 2, territoryPrimaryKeyColumns),
	)
	values := []interface{}{related.RegionID, o.TerritoryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RegionID = related.RegionID
	if o.R == nil {
		o.R = &territoryR{
			Region: related,
		}
	} else {
		o.R.Region = related
	}

	if related.R == nil {
		related.R = &regionR{
			Territories: TerritorySlice{o},
		}
	} else {
		related.R.Territories = append(related.R.Territories, o)
	}

	return nil
}

// AddEmployees adds the given related objects to the existing relationships
// of the territory, optionally inserting them as new records.
// Appends related to o.R.Employees.
// Sets related.R.Territories appropriately.
func (o *Territory) AddEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"employee_territories\" (\"territory_id\", \"employee_id\") values ($1, $2)"
		values := []interface{}{o.TerritoryID, rel.EmployeeID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &territoryR{
			Employees: related,
		}
	} else {
		o.R.Employees = append(o.R.Employees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &employeeR{
				Territories: TerritorySlice{o},
			}
		} else {
			rel.R.Territories = append(rel.R.Territories, o)
		}
	}
	return nil
}

// SetEmployees removes all previously related items of the
// territory replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Territories's Employees accordingly.
// Replaces o.R.Employees with related.
// Sets related.R.Territories's Employees accordingly.
func (o *Territory) SetEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	query := "delete from \"employee_territories\" where \"territory_id\" = $1"
	values := []interface{}{o.TerritoryID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeEmployeesFromTerritoriesSlice(o, related)
	if o.R != nil {
		o.R.Employees = nil
	}
	return o.AddEmployees(ctx, exec, insert, related...)
}

// RemoveEmployees relationships from objects passed in.
// Removes related items from R.Employees (uses pointer comparison, removal does not keep order)
// Sets related.R.Territories.
func (o *Territory) RemoveEmployees(ctx context.Context, exec boil.ContextExecutor, related ...*Employee) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"employee_territories\" where \"territory_id\" = $1 and \"employee_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.TerritoryID}
	for _, rel := range related {
		values = append(values, rel.EmployeeID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeEmployeesFromTerritoriesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Employees {
			if rel != ri {
				continue
			}

			ln := len(o.R.Employees)
			if ln > 1 && i < ln-1 {
				o.R.Employees[i] = o.R.Employees[ln-1]
			}
			o.R.Employees = o.R.Employees[:ln-1]
			break
		}
	}

	return nil
}

func removeEmployeesFromTerritoriesSlice(o *Territory, related []*Employee) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Territories {
			if o.TerritoryID != ri.TerritoryID {
				continue
			}

			ln := len(rel.R.Territories)
			if ln > 1 && i < ln-1 {
				rel.R.Territories[i] = rel.R.Territories[ln-1]
			}
			rel.R.Territories = rel.R.Territories[:ln-1]
			break
		}
	}
}

// Territories retrieves all the records using an executor.
func Territories(mods ...qm.QueryMod) territoryQuery {
	mods = append(mods, qm.From("\"territories\""))
	return territoryQuery{NewQuery(mods...)}
}

// FindTerritory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTerritory(ctx context.Context, exec boil.ContextExecutor, territoryID string, selectCols ...string) (*Territory, error) {
	territoryObj := &Territory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"territories\" where \"territory_id\"=$1", sel,
	)

	q := queries.Raw(query, territoryID)

	err := q.Bind(ctx, exec, territoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from territories")
	}

	if err = territoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return territoryObj, err
	}

	return territoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Territory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no territories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(territoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	territoryInsertCacheMut.RLock()
	cache, cached := territoryInsertCache[key]
	territoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			territoryAllColumns,
			territoryColumnsWithDefault,
			territoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(territoryType, territoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(territoryType, territoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"territories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"territories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into territories")
	}

	if !cached {
		territoryInsertCacheMut.Lock()
		territoryInsertCache[key] = cache
		territoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Territory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Territory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	territoryUpdateCacheMut.RLock()
	cache, cached := territoryUpdateCache[key]
	territoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			territoryAllColumns,
			territoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update territories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"territories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, territoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(territoryType, territoryMapping, append(wl, territoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update territories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for territories")
	}

	if !cached {
		territoryUpdateCacheMut.Lock()
		territoryUpdateCache[key] = cache
		territoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q territoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for territories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for territories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TerritorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), territoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"territories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, territoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in territory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all territory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Territory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no territories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(territoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	territoryUpsertCacheMut.RLock()
	cache, cached := territoryUpsertCache[key]
	territoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			territoryAllColumns,
			territoryColumnsWithDefault,
			territoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			territoryAllColumns,
			territoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert territories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(territoryPrimaryKeyColumns))
			copy(conflict, territoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"territories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(territoryType, territoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(territoryType, territoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert territories")
	}

	if !cached {
		territoryUpsertCacheMut.Lock()
		territoryUpsertCache[key] = cache
		territoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Territory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Territory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Territory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), territoryPrimaryKeyMapping)
	sql := "DELETE FROM \"territories\" WHERE \"territory_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from territories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for territories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q territoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no territoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from territories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for territories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TerritorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(territoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), territoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"territories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, territoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from territory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for territories")
	}

	if len(territoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Territory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTerritory(ctx, exec, o.TerritoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TerritorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TerritorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), territoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"territories\".* FROM \"territories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, territoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TerritorySlice")
	}

	*o = slice

	return nil
}

// TerritoryExists checks if the Territory row exists.
func TerritoryExists(ctx context.Context, exec boil.ContextExecutor, territoryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"territories\" where \"territory_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, territoryID)
	}
	row := exec.QueryRowContext(ctx, sql, territoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if territories exists")
	}

	return exists, nil
}
