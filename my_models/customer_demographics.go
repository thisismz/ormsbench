// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomerDemographic is an object representing the database table.
type CustomerDemographic struct {
	CustomerTypeID string      `boil:"customer_type_id" json:"customer_type_id" toml:"customer_type_id" yaml:"customer_type_id"`
	CustomerDesc   null.String `boil:"customer_desc" json:"customer_desc,omitempty" toml:"customer_desc" yaml:"customer_desc,omitempty"`

	R *customerDemographicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerDemographicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerDemographicColumns = struct {
	CustomerTypeID string
	CustomerDesc   string
}{
	CustomerTypeID: "customer_type_id",
	CustomerDesc:   "customer_desc",
}

var CustomerDemographicTableColumns = struct {
	CustomerTypeID string
	CustomerDesc   string
}{
	CustomerTypeID: "customer_demographics.customer_type_id",
	CustomerDesc:   "customer_demographics.customer_desc",
}

// Generated where

var CustomerDemographicWhere = struct {
	CustomerTypeID whereHelperstring
	CustomerDesc   whereHelpernull_String
}{
	CustomerTypeID: whereHelperstring{field: "\"customer_demographics\".\"customer_type_id\""},
	CustomerDesc:   whereHelpernull_String{field: "\"customer_demographics\".\"customer_desc\""},
}

// CustomerDemographicRels is where relationship names are stored.
var CustomerDemographicRels = struct {
	Customers string
}{
	Customers: "Customers",
}

// customerDemographicR is where relationships are stored.
type customerDemographicR struct {
	Customers CustomerSlice `boil:"Customers" json:"Customers" toml:"Customers" yaml:"Customers"`
}

// NewStruct creates a new relationship struct
func (*customerDemographicR) NewStruct() *customerDemographicR {
	return &customerDemographicR{}
}

// customerDemographicL is where Load methods for each relationship are stored.
type customerDemographicL struct{}

var (
	customerDemographicAllColumns            = []string{"customer_type_id", "customer_desc"}
	customerDemographicColumnsWithoutDefault = []string{"customer_type_id", "customer_desc"}
	customerDemographicColumnsWithDefault    = []string{}
	customerDemographicPrimaryKeyColumns     = []string{"customer_type_id"}
)

type (
	// CustomerDemographicSlice is an alias for a slice of pointers to CustomerDemographic.
	// This should almost always be used instead of []CustomerDemographic.
	CustomerDemographicSlice []*CustomerDemographic
	// CustomerDemographicHook is the signature for custom CustomerDemographic hook methods
	CustomerDemographicHook func(context.Context, boil.ContextExecutor, *CustomerDemographic) error

	customerDemographicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerDemographicType                 = reflect.TypeOf(&CustomerDemographic{})
	customerDemographicMapping              = queries.MakeStructMapping(customerDemographicType)
	customerDemographicPrimaryKeyMapping, _ = queries.BindMapping(customerDemographicType, customerDemographicMapping, customerDemographicPrimaryKeyColumns)
	customerDemographicInsertCacheMut       sync.RWMutex
	customerDemographicInsertCache          = make(map[string]insertCache)
	customerDemographicUpdateCacheMut       sync.RWMutex
	customerDemographicUpdateCache          = make(map[string]updateCache)
	customerDemographicUpsertCacheMut       sync.RWMutex
	customerDemographicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customerDemographicBeforeInsertHooks []CustomerDemographicHook
var customerDemographicBeforeUpdateHooks []CustomerDemographicHook
var customerDemographicBeforeDeleteHooks []CustomerDemographicHook
var customerDemographicBeforeUpsertHooks []CustomerDemographicHook

var customerDemographicAfterInsertHooks []CustomerDemographicHook
var customerDemographicAfterSelectHooks []CustomerDemographicHook
var customerDemographicAfterUpdateHooks []CustomerDemographicHook
var customerDemographicAfterDeleteHooks []CustomerDemographicHook
var customerDemographicAfterUpsertHooks []CustomerDemographicHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CustomerDemographic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CustomerDemographic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CustomerDemographic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CustomerDemographic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CustomerDemographic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerDemographic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CustomerDemographic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CustomerDemographic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CustomerDemographic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerDemographicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerDemographicHook registers your hook function for all future operations.
func AddCustomerDemographicHook(hookPoint boil.HookPoint, customerDemographicHook CustomerDemographicHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		customerDemographicBeforeInsertHooks = append(customerDemographicBeforeInsertHooks, customerDemographicHook)
	case boil.BeforeUpdateHook:
		customerDemographicBeforeUpdateHooks = append(customerDemographicBeforeUpdateHooks, customerDemographicHook)
	case boil.BeforeDeleteHook:
		customerDemographicBeforeDeleteHooks = append(customerDemographicBeforeDeleteHooks, customerDemographicHook)
	case boil.BeforeUpsertHook:
		customerDemographicBeforeUpsertHooks = append(customerDemographicBeforeUpsertHooks, customerDemographicHook)
	case boil.AfterInsertHook:
		customerDemographicAfterInsertHooks = append(customerDemographicAfterInsertHooks, customerDemographicHook)
	case boil.AfterSelectHook:
		customerDemographicAfterSelectHooks = append(customerDemographicAfterSelectHooks, customerDemographicHook)
	case boil.AfterUpdateHook:
		customerDemographicAfterUpdateHooks = append(customerDemographicAfterUpdateHooks, customerDemographicHook)
	case boil.AfterDeleteHook:
		customerDemographicAfterDeleteHooks = append(customerDemographicAfterDeleteHooks, customerDemographicHook)
	case boil.AfterUpsertHook:
		customerDemographicAfterUpsertHooks = append(customerDemographicAfterUpsertHooks, customerDemographicHook)
	}
}

// One returns a single customerDemographic record from the query.
func (q customerDemographicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerDemographic, error) {
	o := &CustomerDemographic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customer_demographics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerDemographic records from the query.
func (q customerDemographicQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerDemographicSlice, error) {
	var o []*CustomerDemographic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerDemographic slice")
	}

	if len(customerDemographicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerDemographic records in the query.
func (q customerDemographicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customer_demographics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerDemographicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customer_demographics exists")
	}

	return count > 0, nil
}

// Customers retrieves all the customer's Customers with an executor.
func (o *CustomerDemographic) Customers(mods ...qm.QueryMod) customerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"customer_customer_demo\" on \"customers\".\"customer_id\" = \"customer_customer_demo\".\"customer_id\""),
		qm.Where("\"customer_customer_demo\".\"customer_type_id\"=?", o.CustomerTypeID),
	)

	query := Customers(queryMods...)
	queries.SetFrom(query.Query, "\"customers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"customers\".*"})
	}

	return query
}

// LoadCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customerDemographicL) LoadCustomers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerDemographic interface{}, mods queries.Applicator) error {
	var slice []*CustomerDemographic
	var object *CustomerDemographic

	if singular {
		object = maybeCustomerDemographic.(*CustomerDemographic)
	} else {
		slice = *maybeCustomerDemographic.(*[]*CustomerDemographic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerDemographicR{}
		}
		args = append(args, object.CustomerTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerDemographicR{}
			}

			for _, a := range args {
				if a == obj.CustomerTypeID {
					continue Outer
				}
			}

			args = append(args, obj.CustomerTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"customers\".customer_id, \"customers\".company_name, \"customers\".contact_name, \"customers\".contact_title, \"customers\".address, \"customers\".city, \"customers\".region, \"customers\".postal_code, \"customers\".country, \"customers\".phone, \"customers\".fax, \"a\".\"customer_type_id\""),
		qm.From("\"customers\""),
		qm.InnerJoin("\"customer_customer_demo\" as \"a\" on \"customers\".\"customer_id\" = \"a\".\"customer_id\""),
		qm.WhereIn("\"a\".\"customer_type_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load customers")
	}

	var resultSlice []*Customer

	var localJoinCols []string
	for results.Next() {
		one := new(Customer)
		var localJoinCol string

		err = results.Scan(&one.CustomerID, &one.CompanyName, &one.ContactName, &one.ContactTitle, &one.Address, &one.City, &one.Region, &one.PostalCode, &one.Country, &one.Phone, &one.Fax, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for customers")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice customers")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Customers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customerR{}
			}
			foreign.R.CustomerTypeCustomerDemographics = append(foreign.R.CustomerTypeCustomerDemographics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.CustomerTypeID == localJoinCol {
				local.R.Customers = append(local.R.Customers, foreign)
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.CustomerTypeCustomerDemographics = append(foreign.R.CustomerTypeCustomerDemographics, local)
				break
			}
		}
	}

	return nil
}

// AddCustomers adds the given related objects to the existing relationships
// of the customer_demographic, optionally inserting them as new records.
// Appends related to o.R.Customers.
// Sets related.R.CustomerTypeCustomerDemographics appropriately.
func (o *CustomerDemographic) AddCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Customer) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"customer_customer_demo\" (\"customer_type_id\", \"customer_id\") values ($1, $2)"
		values := []interface{}{o.CustomerTypeID, rel.CustomerID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &customerDemographicR{
			Customers: related,
		}
	} else {
		o.R.Customers = append(o.R.Customers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerR{
				CustomerTypeCustomerDemographics: CustomerDemographicSlice{o},
			}
		} else {
			rel.R.CustomerTypeCustomerDemographics = append(rel.R.CustomerTypeCustomerDemographics, o)
		}
	}
	return nil
}

// SetCustomers removes all previously related items of the
// customer_demographic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CustomerTypeCustomerDemographics's Customers accordingly.
// Replaces o.R.Customers with related.
// Sets related.R.CustomerTypeCustomerDemographics's Customers accordingly.
func (o *CustomerDemographic) SetCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Customer) error {
	query := "delete from \"customer_customer_demo\" where \"customer_type_id\" = $1"
	values := []interface{}{o.CustomerTypeID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCustomersFromCustomerTypeCustomerDemographicsSlice(o, related)
	if o.R != nil {
		o.R.Customers = nil
	}
	return o.AddCustomers(ctx, exec, insert, related...)
}

// RemoveCustomers relationships from objects passed in.
// Removes related items from R.Customers (uses pointer comparison, removal does not keep order)
// Sets related.R.CustomerTypeCustomerDemographics.
func (o *CustomerDemographic) RemoveCustomers(ctx context.Context, exec boil.ContextExecutor, related ...*Customer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"customer_customer_demo\" where \"customer_type_id\" = $1 and \"customer_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.CustomerTypeID}
	for _, rel := range related {
		values = append(values, rel.CustomerID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCustomersFromCustomerTypeCustomerDemographicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Customers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Customers)
			if ln > 1 && i < ln-1 {
				o.R.Customers[i] = o.R.Customers[ln-1]
			}
			o.R.Customers = o.R.Customers[:ln-1]
			break
		}
	}

	return nil
}

func removeCustomersFromCustomerTypeCustomerDemographicsSlice(o *CustomerDemographic, related []*Customer) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.CustomerTypeCustomerDemographics {
			if o.CustomerTypeID != ri.CustomerTypeID {
				continue
			}

			ln := len(rel.R.CustomerTypeCustomerDemographics)
			if ln > 1 && i < ln-1 {
				rel.R.CustomerTypeCustomerDemographics[i] = rel.R.CustomerTypeCustomerDemographics[ln-1]
			}
			rel.R.CustomerTypeCustomerDemographics = rel.R.CustomerTypeCustomerDemographics[:ln-1]
			break
		}
	}
}

// CustomerDemographics retrieves all the records using an executor.
func CustomerDemographics(mods ...qm.QueryMod) customerDemographicQuery {
	mods = append(mods, qm.From("\"customer_demographics\""))
	return customerDemographicQuery{NewQuery(mods...)}
}

// FindCustomerDemographic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerDemographic(ctx context.Context, exec boil.ContextExecutor, customerTypeID string, selectCols ...string) (*CustomerDemographic, error) {
	customerDemographicObj := &CustomerDemographic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"customer_demographics\" where \"customer_type_id\"=$1", sel,
	)

	q := queries.Raw(query, customerTypeID)

	err := q.Bind(ctx, exec, customerDemographicObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from customer_demographics")
	}

	if err = customerDemographicObj.doAfterSelectHooks(ctx, exec); err != nil {
		return customerDemographicObj, err
	}

	return customerDemographicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerDemographic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_demographics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerDemographicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerDemographicInsertCacheMut.RLock()
	cache, cached := customerDemographicInsertCache[key]
	customerDemographicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerDemographicAllColumns,
			customerDemographicColumnsWithDefault,
			customerDemographicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerDemographicType, customerDemographicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerDemographicType, customerDemographicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"customer_demographics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"customer_demographics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into customer_demographics")
	}

	if !cached {
		customerDemographicInsertCacheMut.Lock()
		customerDemographicInsertCache[key] = cache
		customerDemographicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CustomerDemographic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerDemographic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customerDemographicUpdateCacheMut.RLock()
	cache, cached := customerDemographicUpdateCache[key]
	customerDemographicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerDemographicAllColumns,
			customerDemographicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update customer_demographics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"customer_demographics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, customerDemographicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerDemographicType, customerDemographicMapping, append(wl, customerDemographicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update customer_demographics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for customer_demographics")
	}

	if !cached {
		customerDemographicUpdateCacheMut.Lock()
		customerDemographicUpdateCache[key] = cache
		customerDemographicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q customerDemographicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for customer_demographics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for customer_demographics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerDemographicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerDemographicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"customer_demographics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, customerDemographicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customerDemographic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customerDemographic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerDemographic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_demographics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerDemographicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerDemographicUpsertCacheMut.RLock()
	cache, cached := customerDemographicUpsertCache[key]
	customerDemographicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			customerDemographicAllColumns,
			customerDemographicColumnsWithDefault,
			customerDemographicColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			customerDemographicAllColumns,
			customerDemographicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert customer_demographics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(customerDemographicPrimaryKeyColumns))
			copy(conflict, customerDemographicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"customer_demographics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(customerDemographicType, customerDemographicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerDemographicType, customerDemographicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert customer_demographics")
	}

	if !cached {
		customerDemographicUpsertCacheMut.Lock()
		customerDemographicUpsertCache[key] = cache
		customerDemographicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CustomerDemographic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerDemographic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomerDemographic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerDemographicPrimaryKeyMapping)
	sql := "DELETE FROM \"customer_demographics\" WHERE \"customer_type_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from customer_demographics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for customer_demographics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerDemographicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customerDemographicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customer_demographics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_demographics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerDemographicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(customerDemographicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerDemographicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"customer_demographics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerDemographicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customerDemographic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_demographics")
	}

	if len(customerDemographicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerDemographic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomerDemographic(ctx, exec, o.CustomerTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerDemographicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerDemographicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerDemographicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"customer_demographics\".* FROM \"customer_demographics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerDemographicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomerDemographicSlice")
	}

	*o = slice

	return nil
}

// CustomerDemographicExists checks if the CustomerDemographic row exists.
func CustomerDemographicExists(ctx context.Context, exec boil.ContextExecutor, customerTypeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"customer_demographics\" where \"customer_type_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customerTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, customerTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if customer_demographics exists")
	}

	return exists, nil
}
