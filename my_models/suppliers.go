// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Supplier is an object representing the database table.
type Supplier struct {
	SupplierID   int16       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`
	CompanyName  string      `boil:"company_name" json:"company_name" toml:"company_name" yaml:"company_name"`
	ContactName  null.String `boil:"contact_name" json:"contact_name,omitempty" toml:"contact_name" yaml:"contact_name,omitempty"`
	ContactTitle null.String `boil:"contact_title" json:"contact_title,omitempty" toml:"contact_title" yaml:"contact_title,omitempty"`
	Address      null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	City         null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Region       null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	PostalCode   null.String `boil:"postal_code" json:"postal_code,omitempty" toml:"postal_code" yaml:"postal_code,omitempty"`
	Country      null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Phone        null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	Fax          null.String `boil:"fax" json:"fax,omitempty" toml:"fax" yaml:"fax,omitempty"`
	Homepage     null.String `boil:"homepage" json:"homepage,omitempty" toml:"homepage" yaml:"homepage,omitempty"`

	R *supplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L supplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SupplierColumns = struct {
	SupplierID   string
	CompanyName  string
	ContactName  string
	ContactTitle string
	Address      string
	City         string
	Region       string
	PostalCode   string
	Country      string
	Phone        string
	Fax          string
	Homepage     string
}{
	SupplierID:   "supplier_id",
	CompanyName:  "company_name",
	ContactName:  "contact_name",
	ContactTitle: "contact_title",
	Address:      "address",
	City:         "city",
	Region:       "region",
	PostalCode:   "postal_code",
	Country:      "country",
	Phone:        "phone",
	Fax:          "fax",
	Homepage:     "homepage",
}

var SupplierTableColumns = struct {
	SupplierID   string
	CompanyName  string
	ContactName  string
	ContactTitle string
	Address      string
	City         string
	Region       string
	PostalCode   string
	Country      string
	Phone        string
	Fax          string
	Homepage     string
}{
	SupplierID:   "suppliers.supplier_id",
	CompanyName:  "suppliers.company_name",
	ContactName:  "suppliers.contact_name",
	ContactTitle: "suppliers.contact_title",
	Address:      "suppliers.address",
	City:         "suppliers.city",
	Region:       "suppliers.region",
	PostalCode:   "suppliers.postal_code",
	Country:      "suppliers.country",
	Phone:        "suppliers.phone",
	Fax:          "suppliers.fax",
	Homepage:     "suppliers.homepage",
}

// Generated where

var SupplierWhere = struct {
	SupplierID   whereHelperint16
	CompanyName  whereHelperstring
	ContactName  whereHelpernull_String
	ContactTitle whereHelpernull_String
	Address      whereHelpernull_String
	City         whereHelpernull_String
	Region       whereHelpernull_String
	PostalCode   whereHelpernull_String
	Country      whereHelpernull_String
	Phone        whereHelpernull_String
	Fax          whereHelpernull_String
	Homepage     whereHelpernull_String
}{
	SupplierID:   whereHelperint16{field: "\"suppliers\".\"supplier_id\""},
	CompanyName:  whereHelperstring{field: "\"suppliers\".\"company_name\""},
	ContactName:  whereHelpernull_String{field: "\"suppliers\".\"contact_name\""},
	ContactTitle: whereHelpernull_String{field: "\"suppliers\".\"contact_title\""},
	Address:      whereHelpernull_String{field: "\"suppliers\".\"address\""},
	City:         whereHelpernull_String{field: "\"suppliers\".\"city\""},
	Region:       whereHelpernull_String{field: "\"suppliers\".\"region\""},
	PostalCode:   whereHelpernull_String{field: "\"suppliers\".\"postal_code\""},
	Country:      whereHelpernull_String{field: "\"suppliers\".\"country\""},
	Phone:        whereHelpernull_String{field: "\"suppliers\".\"phone\""},
	Fax:          whereHelpernull_String{field: "\"suppliers\".\"fax\""},
	Homepage:     whereHelpernull_String{field: "\"suppliers\".\"homepage\""},
}

// SupplierRels is where relationship names are stored.
var SupplierRels = struct {
	Products string
}{
	Products: "Products",
}

// supplierR is where relationships are stored.
type supplierR struct {
	Products ProductSlice `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
}

// NewStruct creates a new relationship struct
func (*supplierR) NewStruct() *supplierR {
	return &supplierR{}
}

// supplierL is where Load methods for each relationship are stored.
type supplierL struct{}

var (
	supplierAllColumns            = []string{"supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "region", "postal_code", "country", "phone", "fax", "homepage"}
	supplierColumnsWithoutDefault = []string{"supplier_id", "company_name", "contact_name", "contact_title", "address", "city", "region", "postal_code", "country", "phone", "fax", "homepage"}
	supplierColumnsWithDefault    = []string{}
	supplierPrimaryKeyColumns     = []string{"supplier_id"}
)

type (
	// SupplierSlice is an alias for a slice of pointers to Supplier.
	// This should almost always be used instead of []Supplier.
	SupplierSlice []*Supplier
	// SupplierHook is the signature for custom Supplier hook methods
	SupplierHook func(context.Context, boil.ContextExecutor, *Supplier) error

	supplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	supplierType                 = reflect.TypeOf(&Supplier{})
	supplierMapping              = queries.MakeStructMapping(supplierType)
	supplierPrimaryKeyMapping, _ = queries.BindMapping(supplierType, supplierMapping, supplierPrimaryKeyColumns)
	supplierInsertCacheMut       sync.RWMutex
	supplierInsertCache          = make(map[string]insertCache)
	supplierUpdateCacheMut       sync.RWMutex
	supplierUpdateCache          = make(map[string]updateCache)
	supplierUpsertCacheMut       sync.RWMutex
	supplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var supplierBeforeInsertHooks []SupplierHook
var supplierBeforeUpdateHooks []SupplierHook
var supplierBeforeDeleteHooks []SupplierHook
var supplierBeforeUpsertHooks []SupplierHook

var supplierAfterInsertHooks []SupplierHook
var supplierAfterSelectHooks []SupplierHook
var supplierAfterUpdateHooks []SupplierHook
var supplierAfterDeleteHooks []SupplierHook
var supplierAfterUpsertHooks []SupplierHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Supplier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Supplier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Supplier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Supplier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Supplier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Supplier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Supplier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Supplier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Supplier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSupplierHook registers your hook function for all future operations.
func AddSupplierHook(hookPoint boil.HookPoint, supplierHook SupplierHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		supplierBeforeInsertHooks = append(supplierBeforeInsertHooks, supplierHook)
	case boil.BeforeUpdateHook:
		supplierBeforeUpdateHooks = append(supplierBeforeUpdateHooks, supplierHook)
	case boil.BeforeDeleteHook:
		supplierBeforeDeleteHooks = append(supplierBeforeDeleteHooks, supplierHook)
	case boil.BeforeUpsertHook:
		supplierBeforeUpsertHooks = append(supplierBeforeUpsertHooks, supplierHook)
	case boil.AfterInsertHook:
		supplierAfterInsertHooks = append(supplierAfterInsertHooks, supplierHook)
	case boil.AfterSelectHook:
		supplierAfterSelectHooks = append(supplierAfterSelectHooks, supplierHook)
	case boil.AfterUpdateHook:
		supplierAfterUpdateHooks = append(supplierAfterUpdateHooks, supplierHook)
	case boil.AfterDeleteHook:
		supplierAfterDeleteHooks = append(supplierAfterDeleteHooks, supplierHook)
	case boil.AfterUpsertHook:
		supplierAfterUpsertHooks = append(supplierAfterUpsertHooks, supplierHook)
	}
}

// One returns a single supplier record from the query.
func (q supplierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Supplier, error) {
	o := &Supplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for suppliers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Supplier records from the query.
func (q supplierQuery) All(ctx context.Context, exec boil.ContextExecutor) (SupplierSlice, error) {
	var o []*Supplier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Supplier slice")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Supplier records in the query.
func (q supplierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count suppliers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q supplierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if suppliers exists")
	}

	return count > 0, nil
}

// Products retrieves all the product's Products with an executor.
func (o *Supplier) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"supplier_id\"=?", o.SupplierID),
	)

	query := Products(queryMods...)
	queries.SetFrom(query.Query, "\"products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"products\".*"})
	}

	return query
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.SupplierID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SupplierID) {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.supplier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Supplier = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.SupplierID, foreign.SupplierID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Supplier = local
				break
			}
		}
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SupplierID, o.SupplierID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.SupplierID, rel.ProductID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SupplierID, o.SupplierID)
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// supplier replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Supplier's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Supplier's Products accordingly.
func (o *Supplier) SetProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"supplier_id\" = null where \"supplier_id\" = $1"
	values := []interface{}{o.SupplierID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.SupplierID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Supplier = nil
		}

		o.R.Products = nil
	}
	return o.AddProducts(ctx, exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Supplier.
func (o *Supplier) RemoveProducts(ctx context.Context, exec boil.ContextExecutor, related ...*Product) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SupplierID, nil)
		if rel.R != nil {
			rel.R.Supplier = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("supplier_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// Suppliers retrieves all the records using an executor.
func Suppliers(mods ...qm.QueryMod) supplierQuery {
	mods = append(mods, qm.From("\"suppliers\""))
	return supplierQuery{NewQuery(mods...)}
}

// FindSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSupplier(ctx context.Context, exec boil.ContextExecutor, supplierID int16, selectCols ...string) (*Supplier, error) {
	supplierObj := &Supplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"suppliers\" where \"supplier_id\"=$1", sel,
	)

	q := queries.Raw(query, supplierID)

	err := q.Bind(ctx, exec, supplierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from suppliers")
	}

	if err = supplierObj.doAfterSelectHooks(ctx, exec); err != nil {
		return supplierObj, err
	}

	return supplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Supplier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suppliers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	supplierInsertCacheMut.RLock()
	cache, cached := supplierInsertCache[key]
	supplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"suppliers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"suppliers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into suppliers")
	}

	if !cached {
		supplierInsertCacheMut.Lock()
		supplierInsertCache[key] = cache
		supplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Supplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Supplier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	supplierUpdateCacheMut.RLock()
	cache, cached := supplierUpdateCache[key]
	supplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update suppliers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, supplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, append(wl, supplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update suppliers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for suppliers")
	}

	if !cached {
		supplierUpdateCacheMut.Lock()
		supplierUpdateCache[key] = cache
		supplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q supplierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for suppliers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SupplierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, supplierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all supplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Supplier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suppliers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	supplierUpsertCacheMut.RLock()
	cache, cached := supplierUpsertCache[key]
	supplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert suppliers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(supplierPrimaryKeyColumns))
			copy(conflict, supplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"suppliers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert suppliers")
	}

	if !cached {
		supplierUpsertCacheMut.Lock()
		supplierUpsertCache[key] = cache
		supplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Supplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Supplier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Supplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), supplierPrimaryKeyMapping)
	sql := "DELETE FROM \"suppliers\" WHERE \"supplier_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for suppliers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q supplierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no supplierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suppliers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SupplierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(supplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suppliers")
	}

	if len(supplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Supplier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSupplier(ctx, exec, o.SupplierID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupplierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"suppliers\".* FROM \"suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SupplierSlice")
	}

	*o = slice

	return nil
}

// SupplierExists checks if the Supplier row exists.
func SupplierExists(ctx context.Context, exec boil.ContextExecutor, supplierID int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"suppliers\" where \"supplier_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplierID)
	}
	row := exec.QueryRowContext(ctx, sql, supplierID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if suppliers exists")
	}

	return exists, nil
}
