// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	EmployeeID      int16       `boil:"employee_id" json:"employee_id" toml:"employee_id" yaml:"employee_id"`
	LastName        string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	FirstName       string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	Title           null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	TitleOfCourtesy null.String `boil:"title_of_courtesy" json:"title_of_courtesy,omitempty" toml:"title_of_courtesy" yaml:"title_of_courtesy,omitempty"`
	BirthDate       null.Time   `boil:"birth_date" json:"birth_date,omitempty" toml:"birth_date" yaml:"birth_date,omitempty"`
	HireDate        null.Time   `boil:"hire_date" json:"hire_date,omitempty" toml:"hire_date" yaml:"hire_date,omitempty"`
	Address         null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	City            null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Region          null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	PostalCode      null.String `boil:"postal_code" json:"postal_code,omitempty" toml:"postal_code" yaml:"postal_code,omitempty"`
	Country         null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	HomePhone       null.String `boil:"home_phone" json:"home_phone,omitempty" toml:"home_phone" yaml:"home_phone,omitempty"`
	Extension       null.String `boil:"extension" json:"extension,omitempty" toml:"extension" yaml:"extension,omitempty"`
	Photo           null.Bytes  `boil:"photo" json:"photo,omitempty" toml:"photo" yaml:"photo,omitempty"`
	Notes           null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	ReportsTo       null.Int16  `boil:"reports_to" json:"reports_to,omitempty" toml:"reports_to" yaml:"reports_to,omitempty"`
	PhotoPath       null.String `boil:"photo_path" json:"photo_path,omitempty" toml:"photo_path" yaml:"photo_path,omitempty"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	EmployeeID      string
	LastName        string
	FirstName       string
	Title           string
	TitleOfCourtesy string
	BirthDate       string
	HireDate        string
	Address         string
	City            string
	Region          string
	PostalCode      string
	Country         string
	HomePhone       string
	Extension       string
	Photo           string
	Notes           string
	ReportsTo       string
	PhotoPath       string
}{
	EmployeeID:      "employee_id",
	LastName:        "last_name",
	FirstName:       "first_name",
	Title:           "title",
	TitleOfCourtesy: "title_of_courtesy",
	BirthDate:       "birth_date",
	HireDate:        "hire_date",
	Address:         "address",
	City:            "city",
	Region:          "region",
	PostalCode:      "postal_code",
	Country:         "country",
	HomePhone:       "home_phone",
	Extension:       "extension",
	Photo:           "photo",
	Notes:           "notes",
	ReportsTo:       "reports_to",
	PhotoPath:       "photo_path",
}

var EmployeeTableColumns = struct {
	EmployeeID      string
	LastName        string
	FirstName       string
	Title           string
	TitleOfCourtesy string
	BirthDate       string
	HireDate        string
	Address         string
	City            string
	Region          string
	PostalCode      string
	Country         string
	HomePhone       string
	Extension       string
	Photo           string
	Notes           string
	ReportsTo       string
	PhotoPath       string
}{
	EmployeeID:      "employees.employee_id",
	LastName:        "employees.last_name",
	FirstName:       "employees.first_name",
	Title:           "employees.title",
	TitleOfCourtesy: "employees.title_of_courtesy",
	BirthDate:       "employees.birth_date",
	HireDate:        "employees.hire_date",
	Address:         "employees.address",
	City:            "employees.city",
	Region:          "employees.region",
	PostalCode:      "employees.postal_code",
	Country:         "employees.country",
	HomePhone:       "employees.home_phone",
	Extension:       "employees.extension",
	Photo:           "employees.photo",
	Notes:           "employees.notes",
	ReportsTo:       "employees.reports_to",
	PhotoPath:       "employees.photo_path",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EmployeeWhere = struct {
	EmployeeID      whereHelperint16
	LastName        whereHelperstring
	FirstName       whereHelperstring
	Title           whereHelpernull_String
	TitleOfCourtesy whereHelpernull_String
	BirthDate       whereHelpernull_Time
	HireDate        whereHelpernull_Time
	Address         whereHelpernull_String
	City            whereHelpernull_String
	Region          whereHelpernull_String
	PostalCode      whereHelpernull_String
	Country         whereHelpernull_String
	HomePhone       whereHelpernull_String
	Extension       whereHelpernull_String
	Photo           whereHelpernull_Bytes
	Notes           whereHelpernull_String
	ReportsTo       whereHelpernull_Int16
	PhotoPath       whereHelpernull_String
}{
	EmployeeID:      whereHelperint16{field: "\"employees\".\"employee_id\""},
	LastName:        whereHelperstring{field: "\"employees\".\"last_name\""},
	FirstName:       whereHelperstring{field: "\"employees\".\"first_name\""},
	Title:           whereHelpernull_String{field: "\"employees\".\"title\""},
	TitleOfCourtesy: whereHelpernull_String{field: "\"employees\".\"title_of_courtesy\""},
	BirthDate:       whereHelpernull_Time{field: "\"employees\".\"birth_date\""},
	HireDate:        whereHelpernull_Time{field: "\"employees\".\"hire_date\""},
	Address:         whereHelpernull_String{field: "\"employees\".\"address\""},
	City:            whereHelpernull_String{field: "\"employees\".\"city\""},
	Region:          whereHelpernull_String{field: "\"employees\".\"region\""},
	PostalCode:      whereHelpernull_String{field: "\"employees\".\"postal_code\""},
	Country:         whereHelpernull_String{field: "\"employees\".\"country\""},
	HomePhone:       whereHelpernull_String{field: "\"employees\".\"home_phone\""},
	Extension:       whereHelpernull_String{field: "\"employees\".\"extension\""},
	Photo:           whereHelpernull_Bytes{field: "\"employees\".\"photo\""},
	Notes:           whereHelpernull_String{field: "\"employees\".\"notes\""},
	ReportsTo:       whereHelpernull_Int16{field: "\"employees\".\"reports_to\""},
	PhotoPath:       whereHelpernull_String{field: "\"employees\".\"photo_path\""},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	ReportsToEmployee  string
	Territories        string
	ReportsToEmployees string
	Orders             string
}{
	ReportsToEmployee:  "ReportsToEmployee",
	Territories:        "Territories",
	ReportsToEmployees: "ReportsToEmployees",
	Orders:             "Orders",
}

// employeeR is where relationships are stored.
type employeeR struct {
	ReportsToEmployee  *Employee      `boil:"ReportsToEmployee" json:"ReportsToEmployee" toml:"ReportsToEmployee" yaml:"ReportsToEmployee"`
	Territories        TerritorySlice `boil:"Territories" json:"Territories" toml:"Territories" yaml:"Territories"`
	ReportsToEmployees EmployeeSlice  `boil:"ReportsToEmployees" json:"ReportsToEmployees" toml:"ReportsToEmployees" yaml:"ReportsToEmployees"`
	Orders             OrderSlice     `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path"}
	employeeColumnsWithoutDefault = []string{"employee_id", "last_name", "first_name", "title", "title_of_courtesy", "birth_date", "hire_date", "address", "city", "region", "postal_code", "country", "home_phone", "extension", "photo", "notes", "reports_to", "photo_path"}
	employeeColumnsWithDefault    = []string{}
	employeePrimaryKeyColumns     = []string{"employee_id"}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should almost always be used instead of []Employee.
	EmployeeSlice []*Employee
	// EmployeeHook is the signature for custom Employee hook methods
	EmployeeHook func(context.Context, boil.ContextExecutor, *Employee) error

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employeeBeforeInsertHooks []EmployeeHook
var employeeBeforeUpdateHooks []EmployeeHook
var employeeBeforeDeleteHooks []EmployeeHook
var employeeBeforeUpsertHooks []EmployeeHook

var employeeAfterInsertHooks []EmployeeHook
var employeeAfterSelectHooks []EmployeeHook
var employeeAfterUpdateHooks []EmployeeHook
var employeeAfterDeleteHooks []EmployeeHook
var employeeAfterUpsertHooks []EmployeeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployeeHook registers your hook function for all future operations.
func AddEmployeeHook(hookPoint boil.HookPoint, employeeHook EmployeeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		employeeBeforeInsertHooks = append(employeeBeforeInsertHooks, employeeHook)
	case boil.BeforeUpdateHook:
		employeeBeforeUpdateHooks = append(employeeBeforeUpdateHooks, employeeHook)
	case boil.BeforeDeleteHook:
		employeeBeforeDeleteHooks = append(employeeBeforeDeleteHooks, employeeHook)
	case boil.BeforeUpsertHook:
		employeeBeforeUpsertHooks = append(employeeBeforeUpsertHooks, employeeHook)
	case boil.AfterInsertHook:
		employeeAfterInsertHooks = append(employeeAfterInsertHooks, employeeHook)
	case boil.AfterSelectHook:
		employeeAfterSelectHooks = append(employeeAfterSelectHooks, employeeHook)
	case boil.AfterUpdateHook:
		employeeAfterUpdateHooks = append(employeeAfterUpdateHooks, employeeHook)
	case boil.AfterDeleteHook:
		employeeAfterDeleteHooks = append(employeeAfterDeleteHooks, employeeHook)
	case boil.AfterUpsertHook:
		employeeAfterUpsertHooks = append(employeeAfterUpsertHooks, employeeHook)
	}
}

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for employees")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employee slice")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count employees rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if employees exists")
	}

	return count > 0, nil
}

// ReportsToEmployee pointed to by the foreign key.
func (o *Employee) ReportsToEmployee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"employee_id\" = ?", o.ReportsTo),
	}

	queryMods = append(queryMods, mods...)

	query := Employees(queryMods...)
	queries.SetFrom(query.Query, "\"employees\"")

	return query
}

// Territories retrieves all the territory's Territories with an executor.
func (o *Employee) Territories(mods ...qm.QueryMod) territoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"employee_territories\" on \"territories\".\"territory_id\" = \"employee_territories\".\"territory_id\""),
		qm.Where("\"employee_territories\".\"employee_id\"=?", o.EmployeeID),
	)

	query := Territories(queryMods...)
	queries.SetFrom(query.Query, "\"territories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"territories\".*"})
	}

	return query
}

// ReportsToEmployees retrieves all the employee's Employees with an executor via reports_to column.
func (o *Employee) ReportsToEmployees(mods ...qm.QueryMod) employeeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"employees\".\"reports_to\"=?", o.EmployeeID),
	)

	query := Employees(queryMods...)
	queries.SetFrom(query.Query, "\"employees\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"employees\".*"})
	}

	return query
}

// Orders retrieves all the order's Orders with an executor.
func (o *Employee) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"employee_id\"=?", o.EmployeeID),
	)

	query := Orders(queryMods...)
	queries.SetFrom(query.Query, "\"orders\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orders\".*"})
	}

	return query
}

// LoadReportsToEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (employeeL) LoadReportsToEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		if !queries.IsNil(object.ReportsTo) {
			args = append(args, object.ReportsTo)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ReportsTo) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ReportsTo) {
				args = append(args, obj.ReportsTo)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.employee_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReportsToEmployee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.ReportsToEmployees = append(foreign.R.ReportsToEmployees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReportsTo, foreign.EmployeeID) {
				local.R.ReportsToEmployee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.ReportsToEmployees = append(foreign.R.ReportsToEmployees, local)
				break
			}
		}
	}

	return nil
}

// LoadTerritories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadTerritories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmployeeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.EmployeeID {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"territories\".territory_id, \"territories\".territory_description, \"territories\".region_id, \"a\".\"employee_id\""),
		qm.From("\"territories\""),
		qm.InnerJoin("\"employee_territories\" as \"a\" on \"territories\".\"territory_id\" = \"a\".\"territory_id\""),
		qm.WhereIn("\"a\".\"employee_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load territories")
	}

	var resultSlice []*Territory

	var localJoinCols []int16
	for results.Next() {
		one := new(Territory)
		var localJoinCol int16

		err = results.Scan(&one.TerritoryID, &one.TerritoryDescription, &one.RegionID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for territories")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice territories")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on territories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for territories")
	}

	if len(territoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Territories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &territoryR{}
			}
			foreign.R.Employees = append(foreign.R.Employees, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.EmployeeID == localJoinCol {
				local.R.Territories = append(local.R.Territories, foreign)
				if foreign.R == nil {
					foreign.R = &territoryR{}
				}
				foreign.R.Employees = append(foreign.R.Employees, local)
				break
			}
		}
	}

	return nil
}

// LoadReportsToEmployees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadReportsToEmployees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmployeeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EmployeeID) {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.reports_to in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load employees")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice employees")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReportsToEmployees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &employeeR{}
			}
			foreign.R.ReportsToEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.EmployeeID, foreign.ReportsTo) {
				local.R.ReportsToEmployees = append(local.R.ReportsToEmployees, foreign)
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.ReportsToEmployee = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		object = maybeEmployee.(*Employee)
	} else {
		slice = *maybeEmployee.(*[]*Employee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmployeeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EmployeeID) {
					continue Outer
				}
			}

			args = append(args, obj.EmployeeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.employee_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Employee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.EmployeeID, foreign.EmployeeID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Employee = local
				break
			}
		}
	}

	return nil
}

// SetReportsToEmployee of the employee to the related item.
// Sets o.R.ReportsToEmployee to related.
// Adds o to related.R.ReportsToEmployees.
func (o *Employee) SetReportsToEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"employees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reports_to"}),
		strmangle.WhereClause("\"", "\"", 2, employeePrimaryKeyColumns),
	)
	values := []interface{}{related.EmployeeID, o.EmployeeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReportsTo, related.EmployeeID)
	if o.R == nil {
		o.R = &employeeR{
			ReportsToEmployee: related,
		}
	} else {
		o.R.ReportsToEmployee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			ReportsToEmployees: EmployeeSlice{o},
		}
	} else {
		related.R.ReportsToEmployees = append(related.R.ReportsToEmployees, o)
	}

	return nil
}

// RemoveReportsToEmployee relationship.
// Sets o.R.ReportsToEmployee to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Employee) RemoveReportsToEmployee(ctx context.Context, exec boil.ContextExecutor, related *Employee) error {
	var err error

	queries.SetScanner(&o.ReportsTo, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("reports_to")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ReportsToEmployee = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReportsToEmployees {
		if queries.Equal(o.ReportsTo, ri.ReportsTo) {
			continue
		}

		ln := len(related.R.ReportsToEmployees)
		if ln > 1 && i < ln-1 {
			related.R.ReportsToEmployees[i] = related.R.ReportsToEmployees[ln-1]
		}
		related.R.ReportsToEmployees = related.R.ReportsToEmployees[:ln-1]
		break
	}
	return nil
}

// AddTerritories adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.Territories.
// Sets related.R.Employees appropriately.
func (o *Employee) AddTerritories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Territory) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"employee_territories\" (\"employee_id\", \"territory_id\") values ($1, $2)"
		values := []interface{}{o.EmployeeID, rel.TerritoryID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &employeeR{
			Territories: related,
		}
	} else {
		o.R.Territories = append(o.R.Territories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &territoryR{
				Employees: EmployeeSlice{o},
			}
		} else {
			rel.R.Employees = append(rel.R.Employees, o)
		}
	}
	return nil
}

// SetTerritories removes all previously related items of the
// employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Employees's Territories accordingly.
// Replaces o.R.Territories with related.
// Sets related.R.Employees's Territories accordingly.
func (o *Employee) SetTerritories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Territory) error {
	query := "delete from \"employee_territories\" where \"employee_id\" = $1"
	values := []interface{}{o.EmployeeID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTerritoriesFromEmployeesSlice(o, related)
	if o.R != nil {
		o.R.Territories = nil
	}
	return o.AddTerritories(ctx, exec, insert, related...)
}

// RemoveTerritories relationships from objects passed in.
// Removes related items from R.Territories (uses pointer comparison, removal does not keep order)
// Sets related.R.Employees.
func (o *Employee) RemoveTerritories(ctx context.Context, exec boil.ContextExecutor, related ...*Territory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"employee_territories\" where \"employee_id\" = $1 and \"territory_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.EmployeeID}
	for _, rel := range related {
		values = append(values, rel.TerritoryID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTerritoriesFromEmployeesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Territories {
			if rel != ri {
				continue
			}

			ln := len(o.R.Territories)
			if ln > 1 && i < ln-1 {
				o.R.Territories[i] = o.R.Territories[ln-1]
			}
			o.R.Territories = o.R.Territories[:ln-1]
			break
		}
	}

	return nil
}

func removeTerritoriesFromEmployeesSlice(o *Employee, related []*Territory) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Employees {
			if o.EmployeeID != ri.EmployeeID {
				continue
			}

			ln := len(rel.R.Employees)
			if ln > 1 && i < ln-1 {
				rel.R.Employees[i] = rel.R.Employees[ln-1]
			}
			rel.R.Employees = rel.R.Employees[:ln-1]
			break
		}
	}
}

// AddReportsToEmployees adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.ReportsToEmployees.
// Sets related.R.ReportsToEmployee appropriately.
func (o *Employee) AddReportsToEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReportsTo, o.EmployeeID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"employees\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reports_to"}),
				strmangle.WhereClause("\"", "\"", 2, employeePrimaryKeyColumns),
			)
			values := []interface{}{o.EmployeeID, rel.EmployeeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReportsTo, o.EmployeeID)
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			ReportsToEmployees: related,
		}
	} else {
		o.R.ReportsToEmployees = append(o.R.ReportsToEmployees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &employeeR{
				ReportsToEmployee: o,
			}
		} else {
			rel.R.ReportsToEmployee = o
		}
	}
	return nil
}

// SetReportsToEmployees removes all previously related items of the
// employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReportsToEmployee's ReportsToEmployees accordingly.
// Replaces o.R.ReportsToEmployees with related.
// Sets related.R.ReportsToEmployee's ReportsToEmployees accordingly.
func (o *Employee) SetReportsToEmployees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Employee) error {
	query := "update \"employees\" set \"reports_to\" = null where \"reports_to\" = $1"
	values := []interface{}{o.EmployeeID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReportsToEmployees {
			queries.SetScanner(&rel.ReportsTo, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReportsToEmployee = nil
		}

		o.R.ReportsToEmployees = nil
	}
	return o.AddReportsToEmployees(ctx, exec, insert, related...)
}

// RemoveReportsToEmployees relationships from objects passed in.
// Removes related items from R.ReportsToEmployees (uses pointer comparison, removal does not keep order)
// Sets related.R.ReportsToEmployee.
func (o *Employee) RemoveReportsToEmployees(ctx context.Context, exec boil.ContextExecutor, related ...*Employee) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReportsTo, nil)
		if rel.R != nil {
			rel.R.ReportsToEmployee = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("reports_to")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReportsToEmployees {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReportsToEmployees)
			if ln > 1 && i < ln-1 {
				o.R.ReportsToEmployees[i] = o.R.ReportsToEmployees[ln-1]
			}
			o.R.ReportsToEmployees = o.R.ReportsToEmployees[:ln-1]
			break
		}
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Employee appropriately.
func (o *Employee) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EmployeeID, o.EmployeeID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"employee_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.EmployeeID, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EmployeeID, o.EmployeeID)
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Employee: o,
			}
		} else {
			rel.R.Employee = o
		}
	}
	return nil
}

// SetOrders removes all previously related items of the
// employee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Employee's Orders accordingly.
// Replaces o.R.Orders with related.
// Sets related.R.Employee's Orders accordingly.
func (o *Employee) SetOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"employee_id\" = null where \"employee_id\" = $1"
	values := []interface{}{o.EmployeeID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Orders {
			queries.SetScanner(&rel.EmployeeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Employee = nil
		}

		o.R.Orders = nil
	}
	return o.AddOrders(ctx, exec, insert, related...)
}

// RemoveOrders relationships from objects passed in.
// Removes related items from R.Orders (uses pointer comparison, removal does not keep order)
// Sets related.R.Employee.
func (o *Employee) RemoveOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EmployeeID, nil)
		if rel.R != nil {
			rel.R.Employee = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("employee_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Orders {
			if rel != ri {
				continue
			}

			ln := len(o.R.Orders)
			if ln > 1 && i < ln-1 {
				o.R.Orders[i] = o.R.Orders[ln-1]
			}
			o.R.Orders = o.R.Orders[:ln-1]
			break
		}
	}

	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("\"employees\""))
	return employeeQuery{NewQuery(mods...)}
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, employeeID int16, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"employees\" where \"employee_id\"=$1", sel,
	)

	q := queries.Raw(query, employeeID)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from employees")
	}

	if err = employeeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return employeeObj, err
	}

	return employeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employees provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"employees\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"employees\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into employees")
	}

	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update employees, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"employees\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update employees row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for employees")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for employees")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"employees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employees provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert employees, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(employeePrimaryKeyColumns))
			copy(conflict, employeePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"employees\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert employees")
	}

	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM \"employees\" WHERE \"employee_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for employees")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employees")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"employees\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employees")
	}

	if len(employeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.EmployeeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"employees\".* FROM \"employees\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, employeeID int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"employees\" where \"employee_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, employeeID)
	}
	row := exec.QueryRowContext(ctx, sql, employeeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if employees exists")
	}

	return exists, nil
}
